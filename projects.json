import json
import tkinter as tk
from tkinter import filedialog, messagebox, simpledialog, ttk
from PIL import Image, ImageTk
import os

class JSONEditor:
    def __init__(self, root):
        self.root = root
        self.root.title("Project JSON Editor")
        self.root.geometry("1200x800")
        self.root.configure(bg="#f0f0f0")
        
        self.projects = []
        self.current_index = -1
        self.image_previews = {}
        self.current_file = None
        
        # Configure style
        self.style = ttk.Style()
        self.style.theme_use('clam')
        self.style.configure('Title.TLabel', font=('Arial', 12, 'bold'))
        self.style.configure('Header.TLabel', font=('Arial', 10, 'bold'))
        
        self.setup_ui()
        
    def setup_ui(self):
        # Main container with padding
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Top toolbar
        self.create_toolbar(main_frame)
        
        # Main content area with paned window
        paned = ttk.PanedWindow(main_frame, orient=tk.HORIZONTAL)
        paned.pack(fill=tk.BOTH, expand=True, pady=(10, 0))
        
        # Left panel - Project list
        self.create_project_list_panel(paned)
        
        # Right panel - Project details
        self.create_details_panel(paned)
        
    def create_toolbar(self, parent):
        toolbar = ttk.Frame(parent)
        toolbar.pack(fill=tk.X, pady=(0, 10))
        
        # File operations
        file_frame = ttk.LabelFrame(toolbar, text="File Operations", padding="5")
        file_frame.pack(side=tk.LEFT, padx=(0, 10))
        
        ttk.Button(file_frame, text="üìÅ Load JSON", command=self.load_json).pack(side=tk.LEFT, padx=2)
        ttk.Button(file_frame, text="üíæ Save", command=self.save_to_file).pack(side=tk.LEFT, padx=2)
        ttk.Button(file_frame, text="üì§ Export", command=self.export_json).pack(side=tk.LEFT, padx=2)
        
        # Project operations
        project_frame = ttk.LabelFrame(toolbar, text="Project Operations", padding="5")
        project_frame.pack(side=tk.LEFT, padx=(0, 10))
        
        ttk.Button(project_frame, text="‚ûï Add Project", command=self.add_new_project).pack(side=tk.LEFT, padx=2)
        ttk.Button(project_frame, text="üóëÔ∏è Delete Project", command=self.delete_project).pack(side=tk.LEFT, padx=2)
        
        # Status label
        self.status_label = ttk.Label(toolbar, text="Ready", foreground="green")
        self.status_label.pack(side=tk.RIGHT)
        
    def create_project_list_panel(self, parent):
        # Left panel frame
        left_frame = ttk.Frame(parent, width=300)
        left_frame.pack_propagate(False)
        parent.add(left_frame, weight=1)
        
        # Project list header
        ttk.Label(left_frame, text="Projects", style='Title.TLabel').pack(anchor=tk.W, pady=(0, 5))
        
        # Search box
        search_frame = ttk.Frame(left_frame)
        search_frame.pack(fill=tk.X, pady=(0, 5))
        
        ttk.Label(search_frame, text="üîç").pack(side=tk.LEFT)
        self.search_var = tk.StringVar()
        self.search_var.trace('w', self.filter_projects)
        search_entry = ttk.Entry(search_frame, textvariable=self.search_var)
        search_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(5, 0))
        
        # Project listbox with scrollbar
        list_frame = ttk.Frame(left_frame)
        list_frame.pack(fill=tk.BOTH, expand=True)
        
        self.project_listbox = tk.Listbox(list_frame, font=('Arial', 10))
        scrollbar_y = ttk.Scrollbar(list_frame, orient=tk.VERTICAL, command=self.project_listbox.yview)
        self.project_listbox.configure(yscrollcommand=scrollbar_y.set)
        
        self.project_listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar_y.pack(side=tk.RIGHT, fill=tk.Y)
        
        self.project_listbox.bind("<<ListboxSelect>>", self.display_project)
        
    def create_details_panel(self, parent):
        # Right panel with scrollable content
        right_frame = ttk.Frame(parent)
        parent.add(right_frame, weight=3)
        
        # Create canvas and scrollbar for scrolling
        canvas = tk.Canvas(right_frame, bg="white")
        scrollbar = ttk.Scrollbar(right_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # Mouse wheel binding
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        canvas.bind_all("<MouseWheel>", _on_mousewheel)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Details content
        self.create_details_content(scrollable_frame)
        
    def create_details_content(self, parent):
        # Header
        header_frame = ttk.Frame(parent)
        header_frame.pack(fill=tk.X, padx=20, pady=20)
        
        ttk.Label(header_frame, text="Project Details", style='Title.TLabel').pack(side=tk.LEFT)
        ttk.Button(header_frame, text="üíæ Save Changes", command=self.save_changes).pack(side=tk.RIGHT)
        
        # Basic Information Section
        basic_frame = ttk.LabelFrame(parent, text="Basic Information", padding="15")
        basic_frame.pack(fill=tk.X, padx=20, pady=(0, 10))
        
        self.fields = {}
        
        # Title
        ttk.Label(basic_frame, text="Title:", style='Header.TLabel').grid(row=0, column=0, sticky=tk.W, pady=2)
        self.fields["title"] = ttk.Entry(basic_frame, font=('Arial', 11), width=60)
        self.fields["title"].grid(row=0, column=1, sticky=tk.W+tk.E, padx=(10, 0), pady=2)
        
        # Date
        ttk.Label(basic_frame, text="Date:", style='Header.TLabel').grid(row=1, column=0, sticky=tk.W, pady=2)
        self.fields["date"] = ttk.Entry(basic_frame, font=('Arial', 11), width=60)
        self.fields["date"].grid(row=1, column=1, sticky=tk.W+tk.E, padx=(10, 0), pady=2)
        
        # Short Description
        ttk.Label(basic_frame, text="Short Description:", style='Header.TLabel').grid(row=2, column=0, sticky=tk.W, pady=2)
        self.fields["shortDescription"] = ttk.Entry(basic_frame, font=('Arial', 11), width=60)
        self.fields["shortDescription"].grid(row=2, column=1, sticky=tk.W+tk.E, padx=(10, 0), pady=2)
        
        # Featured checkbox
        self.featured_var = tk.BooleanVar()
        self.featured_check = ttk.Checkbutton(basic_frame, text="‚≠ê Featured Project", variable=self.featured_var)
        self.featured_check.grid(row=3, column=1, sticky=tk.W, padx=(10, 0), pady=10)
        
        basic_frame.columnconfigure(1, weight=1)
        
        # Full Description Section
        desc_frame = ttk.LabelFrame(parent, text="Full Description", padding="15")
        desc_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=(0, 10))
        
        text_frame = ttk.Frame(desc_frame)
        text_frame.pack(fill=tk.BOTH, expand=True)
        
        self.fields["fullDescription"] = tk.Text(text_frame, height=8, font=('Arial', 10), wrap=tk.WORD)
        desc_scrollbar = ttk.Scrollbar(text_frame, orient=tk.VERTICAL, command=self.fields["fullDescription"].yview)
        self.fields["fullDescription"].configure(yscrollcommand=desc_scrollbar.set)
        
        self.fields["fullDescription"].pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        desc_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # Tags and Technologies Section
        tags_frame = ttk.LabelFrame(parent, text="Tags & Technologies", padding="15")
        tags_frame.pack(fill=tk.X, padx=20, pady=(0, 10))
        
        ttk.Label(tags_frame, text="Tags:", style='Header.TLabel').grid(row=0, column=0, sticky=tk.W, pady=2)
        self.tags_entry = ttk.Entry(tags_frame, font=('Arial', 11), width=60)
        self.tags_entry.grid(row=0, column=1, sticky=tk.W+tk.E, padx=(10, 0), pady=2)
        ttk.Label(tags_frame, text="(comma-separated)", foreground="gray").grid(row=0, column=2, sticky=tk.W, padx=(5, 0))
        
        ttk.Label(tags_frame, text="Technologies:", style='Header.TLabel').grid(row=1, column=0, sticky=tk.W, pady=2)
        self.tech_entry = ttk.Entry(tags_frame, font=('Arial', 11), width=60)
        self.tech_entry.grid(row=1, column=1, sticky=tk.W+tk.E, padx=(10, 0), pady=2)
        ttk.Label(tags_frame, text="(comma-separated)", foreground="gray").grid(row=1, column=2, sticky=tk.W, padx=(5, 0))
        
        tags_frame.columnconfigure(1, weight=1)
        
        # Images Section
        images_frame = ttk.LabelFrame(parent, text="Images", padding="15")
        images_frame.pack(fill=tk.X, padx=20, pady=(0, 10))
        
        # Main image
        main_img_frame = ttk.Frame(images_frame)
        main_img_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Label(main_img_frame, text="Main Image:", style='Header.TLabel').pack(anchor=tk.W)
        
        main_entry_frame = ttk.Frame(main_img_frame)
        main_entry_frame.pack(fill=tk.X, pady=2)
        
        self.image_fields = {}
        self.image_fields["main-image"] = ttk.Entry(main_entry_frame, font=('Arial', 10))
        self.image_fields["main-image"].pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        ttk.Button(main_entry_frame, text="Browse...", 
                  command=lambda: self.select_image("main-image")).pack(side=tk.RIGHT, padx=(5, 0))
        
        # Main image preview
        self.image_previews["main-image"] = ttk.Label(main_img_frame)
        self.image_previews["main-image"].pack(pady=5)
        
        # Additional images
        ttk.Label(images_frame, text="Additional Images:", style='Header.TLabel').pack(anchor=tk.W, pady=(10, 0))
        
        images_entry_frame = ttk.Frame(images_frame)
        images_entry_frame.pack(fill=tk.X, pady=2)
        
        self.images_entry = ttk.Entry(images_entry_frame, font=('Arial', 10))
        self.images_entry.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        ttk.Button(images_entry_frame, text="Browse...", 
                  command=self.select_images).pack(side=tk.RIGHT, padx=(5, 0))
        
        ttk.Label(images_frame, text="(comma-separated paths)", foreground="gray").pack(anchor=tk.W)
        
        # Additional images preview
        self.images_preview = ttk.Frame(images_frame)
        self.images_preview.pack(fill=tk.X, pady=5)
        
    def filter_projects(self, *args):
        search_term = self.search_var.get().lower()
        self.project_listbox.delete(0, tk.END)
        
        for i, proj in enumerate(self.projects):
            title = proj.get("title", "Untitled").lower()
            if search_term in title or not search_term:
                display_text = proj.get("title", "Untitled")
                if proj.get("featured", False):
                    display_text = "‚≠ê " + display_text
                self.project_listbox.insert(tk.END, display_text)
                
    def delete_project(self):
        if self.current_index == -1:
            messagebox.showwarning("Warning", "No project selected!")
            return
            
        if messagebox.askyesno("Confirm Delete", "Are you sure you want to delete this project?"):
            del self.projects[self.current_index]
            self.filter_projects()
            self.clear_fields()
            self.current_index = -1
            self.update_status("Project deleted", "orange")
            
    def clear_fields(self):
        for field in self.fields:
            if field == "fullDescription":
                self.fields[field].delete("1.0", tk.END)
            else:
                self.fields[field].delete(0, tk.END)
        
        self.tags_entry.delete(0, tk.END)
        self.tech_entry.delete(0, tk.END)
        self.image_fields["main-image"].delete(0, tk.END)
        self.images_entry.delete(0, tk.END)
        self.featured_var.set(False)
        
        # Clear previews
        self.image_previews["main-image"].configure(image="")
        for widget in self.images_preview.winfo_children():
            widget.destroy()
            
    def update_status(self, message, color="green"):
        self.status_label.configure(text=message, foreground=color)
        self.root.after(3000, lambda: self.status_label.configure(text="Ready", foreground="green"))

    def to_relative_path(self, full_path):
        try:
            return os.path.relpath(full_path, start=os.getcwd())
        except:
            return full_path

    def select_image(self, key):
        file_path = filedialog.askopenfilename(
            title="Select Image",
            filetypes=[("Image files", "*.png *.jpg *.jpeg *.gif *.bmp")]
        )
        if file_path:
            rel_path = self.to_relative_path(file_path)
            self.image_fields[key].delete(0, tk.END)
            self.image_fields[key].insert(0, rel_path)
            self.show_preview(key, rel_path)

    def select_images(self):
        file_paths = filedialog.askopenfilenames(
            title="Select Images",
            filetypes=[("Image files", "*.png *.jpg *.jpeg *.gif *.bmp")]
        )
        if file_paths:
            rel_paths = [self.to_relative_path(p) for p in file_paths]
            joined = ", ".join(rel_paths)
            self.images_entry.delete(0, tk.END)
            self.images_entry.insert(0, joined)
            self.show_images_preview()

    def show_preview(self, key, path):
        if not os.path.isfile(path):
            self.image_previews[key].configure(image="", text="Image not found")
            return
            
        try:
            img = Image.open(path)
            img.thumbnail((150, 150))
            photo = ImageTk.PhotoImage(img)
            self.image_previews[key].configure(image=photo, text="")
            self.image_previews[key].image = photo
        except Exception as e:
            self.image_previews[key].configure(image="", text="Cannot load image")
            
    def show_images_preview(self):
        # Clear existing previews
        for widget in self.images_preview.winfo_children():
            widget.destroy()
            
        images_text = self.images_entry.get()
        if not images_text.strip():
            return
            
        paths = [p.strip() for p in images_text.split(",") if p.strip()]
        
        for i, path in enumerate(paths[:5]):  # Limit to 5 previews
            if os.path.isfile(path):
                try:
                    img = Image.open(path)
                    img.thumbnail((80, 80))
                    photo = ImageTk.PhotoImage(img)
                    label = ttk.Label(self.images_preview, image=photo)
                    label.image = photo
                    label.pack(side="left", padx=2)
                except:
                    continue
                    
        if len(paths) > 5:
            ttk.Label(self.images_preview, text=f"... and {len(paths)-5} more").pack(side="left", padx=5)

    def load_json(self):
        file_path = filedialog.askopenfilename(
            title="Load JSON File",
            filetypes=[("JSON files", "*.json")]
        )
        if file_path:
            try:
                self.current_file = file_path
                with open(file_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.projects = data.get("projects", [])
                    self.filter_projects()
                    self.update_status(f"Loaded {len(self.projects)} projects")
            except Exception as e:
                messagebox.showerror("Error", f"Failed to load file: {str(e)}")

    def display_project(self, event):
        selection = self.project_listbox.curselection()
        if not selection:
            return
            
        # Map listbox selection to actual project index
        selected_title = self.project_listbox.get(selection[0]).replace("‚≠ê ", "")
        
        for i, proj in enumerate(self.projects):
            if proj.get("title", "Untitled") == selected_title:
                self.current_index = i
                break
        else:
            return
            
        project = self.projects[self.current_index]
        
        # Fill basic fields
        for key in ["title", "date", "shortDescription"]:
            self.fields[key].delete(0, tk.END)
            self.fields[key].insert(0, project.get(key, ""))

        # Fill full description
        self.fields["fullDescription"].delete("1.0", tk.END)
        self.fields["fullDescription"].insert("1.0", project.get("fullDescription", ""))

        # Fill tags and technologies
        self.tags_entry.delete(0, tk.END)
        self.tags_entry.insert(0, ", ".join(project.get("tags", [])))
        
        self.tech_entry.delete(0, tk.END)
        self.tech_entry.insert(0, ", ".join(project.get("technologies", [])))

        # Fill images
        self.image_fields["main-image"].delete(0, tk.END)
        main_image = project.get("main-image", "")
        self.image_fields["main-image"].insert(0, main_image)
        if main_image:
            self.show_preview("main-image", main_image)

        self.images_entry.delete(0, tk.END)
        self.images_entry.insert(0, ", ".join(project.get("images", [])))
        self.show_images_preview()

        # Set featured status
        self.featured_var.set(project.get("featured", False))

    def add_new_project(self):
        title = simpledialog.askstring("New Project", "Enter project title:", initialvalue="New Project")
        if not title:
            return
            
        new_project = {
            "title": title,
            "date": "",
            "shortDescription": "",
            "fullDescription": "",
            "tags": [],
            "technologies": [],
            "main-image": "",
            "images": [],
            "featured": False
        }
        
        self.projects.append(new_project)
        self.filter_projects()
        
        # Select the new project
        for i in range(self.project_listbox.size()):
            if title in self.project_listbox.get(i):
                self.project_listbox.selection_clear(0, tk.END)
                self.project_listbox.selection_set(i)
                self.display_project(None)
                break
                
        self.update_status("New project added")

    def save_changes(self):
        if self.current_index == -1:
            messagebox.showwarning("Warning", "No project selected!")
            return

        try:
            # Save all fields
            for key, entry in self.fields.items():
                if key == "fullDescription":
                    self.projects[self.current_index][key] = entry.get("1.0", tk.END).strip()
                else:
                    self.projects[self.current_index][key] = entry.get().strip()

            # Save tags and technologies
            self.projects[self.current_index]["tags"] = [
                tag.strip() for tag in self.tags_entry.get().split(",") if tag.strip()
            ]
            self.projects[self.current_index]["technologies"] = [
                tech.strip() for tech in self.tech_entry.get().split(",") if tech.strip()
            ]

            # Save main image
            self.projects[self.current_index]["main-image"] = self.image_fields["main-image"].get().strip()
            
            # Save all images (not just the first one)
            images_string = self.images_entry.get().strip()
            if images_string:
                images = [img.strip() for img in images_string.split(",") if img.strip()]
                self.projects[self.current_index]["images"] = images
            else:
                self.projects[self.current_index]["images"] = []

            # Save featured status
            self.projects[self.current_index]["featured"] = self.featured_var.get()

            # Update project list display to reflect any title changes
            self.filter_projects()
            
            self.update_status("Changes saved successfully")
            
            # Auto-save to file if one is loaded
            if self.current_file:
                self.save_to_file()
                
        except Exception as e:
            messagebox.showerror("Error", f"Failed to save changes: {str(e)}")
            self.update_status("Save failed", "red")

    def save_to_file(self):
        if not self.current_file:
            self.export_json()
            return
            
        try:
            # Ensure the projects data is properly structured
            data_to_save = {"projects": self.projects}
            
            with open(self.current_file, 'w', encoding='utf-8') as f:
                json.dump(data_to_save, f, indent=2, ensure_ascii=False)
            
            self.update_status(f"File saved: {os.path.basename(self.current_file)}")
            
        except Exception as e:
            messagebox.showerror("Error", f"Failed to save file: {str(e)}")
            self.update_status("Save failed", "red")

    def export_json(self):
        file_path = filedialog.asksaveasfilename(
            title="Export JSON",
            defaultextension=".json",
            filetypes=[("JSON files", "*.json")]
        )
        if file_path:
            try:
                # Ensure the projects data is properly structured
                data_to_save = {"projects": self.projects}
                
                with open(file_path, 'w', encoding='utf-8') as f:
                    json.dump(data_to_save, f, indent=2, ensure_ascii=False)
                    
                self.current_file = file_path
                self.update_status(f"Exported: {os.path.basename(file_path)}")
                
            except Exception as e:
                messagebox.showerror("Error", f"Failed to export file: {str(e)}")
                self.update_status("Export failed", "red")

if __name__ == '__main__':
    root = tk.Tk()
    app = JSONEditor(root)
    root.mainloop()